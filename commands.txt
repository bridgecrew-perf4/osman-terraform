0. Export AWS Access key ID 
   Export AWS secret access key

   export AWS_ACCESS_KEY_ID=(your access key id)
   export AWS_SECRET_ACCESS_KEY=(your secret access key)

   export AWS_ACCESS_KEY_ID=AKIAZHKT4QFUXHM4JA3T

   export AWS_SECRET_ACCESS_KEY=jSHHqk7SAe9uevp47KgJyUGpXXbd+sWoiTMy/bFh

   export TF_VAR_db_password="usman"
csdcsdc

Adding to Github anything changes is made

git add main.tf 
git commit -m "Initial commit"

# Add gitignore
git add .gitignore 
git commit -m "Add a .gitignore file"

# connect github
git remote add origin git@github.com:<YOUR_USERNAME>/<YOUR_REPO_NAME>.git

# push to github
git push origin master 

# to pull from others
git pull origin master


# Note u will need to do dis anytime the computer is restarted or once u open another terminal.

1. Write your code in main.tf - see file

2. terraform init
to tell Terraform to scan the code, figure out which providers you’re using, and download the code for them
Run this anytime we start a new terraform code and its safe to run multiple times its idempotent.

3. terraform plan
lets you see what Terraform will do before actually making any changes. This is a great way to sanity check your code before unleashing it onto the world.

a plus sign (+) will be created, anything with a minus sign (–) will be deleted, and anything with a tilde sign (~) will be modified in place

3. terraform show
shows all the resource u have deployed

4. terraform apply
To actually create the Instance
the apply command shows you the same plan output and asks you to confirm whether you actually want to proceed with this plan so sometimes no need to use plan command

4. terraform validate

5. terraform fmt

6. terraform graph
to show you the dependency graph 

7. terraform destroy

8. terraform workspace show
show current workspace

9. terraform workspace new example1
create new workspace example1

10. terraform workspace list
list all workspaces

11. terraform workspace select example1
switched to workspace example1

12. 